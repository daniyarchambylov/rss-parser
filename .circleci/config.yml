# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.7.1
        environment:
          SECRET_KEY: $SECRET_KEY
          ALLOWED_HOSTS: 127.0.0.1 localhost
          DB_ENGINE: postgresql
          DB_HOST: 127.0.0.1
          DB_NAME: $DB_NAME
          DB_USER: $DB_USER
          DB_PASSWORD: $DB_PASSWORD
          DB_PORT: $DB_PORT
          COVERALLS_REPO_TOKEN: $COVERALLS_REPO_TOKEN

      - image: circleci/postgres:9.6.7
        environment:
          POSTGRES_USER: $DB_USER
          POSTGRES_PASSWORD: $DB_PASSWORD
          POSTGRES_DB: $DB_NAME

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests_require.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt -r tests_require.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests_require.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            coverage run manage.py test

      - run:
          name: Coverage
          command: |
            . venv/bin/activate
            coveralls

      # - store_artifacts:
      #     path: test-reports
      #     destination: test-reports

